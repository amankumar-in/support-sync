support-sync/
├── package.json           # Root package.json for workspace setup
├── .env.example           # Example environment variables
├── .gitignore             # Git ignore file
├── README.md              # Project documentation
│
├── backend/               # Backend microservices
│   ├── package.json       # Shared dependencies for all services
│   ├── shared/            # Shared code between services
│   │   ├── middlewares/   # Common middlewares (auth, error handling)
│   │   ├── utils/         # Utility functions
│   │   └── config/        # Configuration files
│   │
│   ├── services/          # Individual microservices
│   │   ├── auth-service/  # Authentication service
│   │   ├── client-service/ # Client management service
│   │   ├── transcription-service/ # AI transcription service
│   │   ├── chatbot-service/ # Chatbot service
│   │   └── billing-service/ # Billing service
│   │
│   └── gateway/           # API Gateway for routing requests
│
└── frontend/              # React frontend application
    ├── public/            # Static files
    └── src/               # Source code
-----------------------------------------------------------------------------
------------------------------------------------------------------------------
backend/shared/middlewares/

middlewares/
├── authMiddleware.js      # JWT verification, extracts user from token
├── errorMiddleware.js     # Global error handling
├── validationMiddleware.js # Request body validation
├── loggerMiddleware.js    # Request/response logging
└── corsMiddleware.js      # CORS configuration

------------------------------------------------------------------------------
------------------------------------------------------------------------------
backend/shared/utils/

utils/
├── apiResponse.js         # Standardized API response formatter
├── asyncHandler.js        # Try/catch wrapper for async controllers
├── logger.js              # Logging utility
├── errorTypes.js          # Custom error classes
└── pagination.js          # Pagination utility for list endpoints

------------------------------------------------------------------------------
------------------------------------------------------------------------------
backend/shared/config/

config/
├── dbConfig.js            # MongoDB connection configuration
├── jwtConfig.js           # JWT settings (secret, expiry)
├── serviceRegistry.js     # Service discovery and endpoints
├── constants.js           # Application constants
└── validators/            # Validation schemas
    ├── authValidators.js  # Auth request validators
    ├── clientValidators.js # Client data validators
    └── ...                # Other validators

------------------------------------------------------------------------------
------------------------------------------------------------------------------

Backend Microservices Structure

Auth Service

auth-service/
├── package.json           # Dependencies: express, mongoose, jsonwebtoken, bcrypt
├── .env                   # ENV: MONGO_URI, JWT_SECRET, PORT
├── server.js              # Service entry point, connects to MongoDB
├── controllers/
│   ├── authController.js  # login, register, refreshToken, logout
│   └── userController.js  # getUsers, getUserById, createUser, updateUser, deleteUser
├── models/
│   ├── User.js            # User schema: email, password(hashed), name, role, agencyId
│   └── Agency.js          # Agency schema: name, subscription status, settings
├── routes/
│   ├── authRoutes.js      # POST /login, /register, /refresh-token, GET /verify
│   └── userRoutes.js      # CRUD routes for user management
├── services/
│   ├── authService.js     # Business logic for authentication
│   └── userService.js     # Business logic for user management
└── utils/
    ├── passwordUtils.js   # Password hashing and comparison
    └── tokenUtils.js      # JWT generation and validation

    -----------------------------------------------------------------------------
------------------------------------------------------------------------------
Client services

client-service/
├── package.json           # Dependencies: express, mongoose, googleapis
├── .env                   # ENV: MONGO_URI, JWT_SECRET, GOOGLE_API_CREDENTIALS
├── server.js              # Service entry point
├── controllers/
│   ├── clientController.js # CRUD operations for clients
│   ├── caseController.js  # Case management
│   ├── noteController.js  # Notes management
│   ├── documentController.js # Document handling
│   └── calendarController.js # Calendar event management
├── models/
│   ├── Client.js          # Client schema: personal info, case worker, status
│   ├── Case.js            # Case schema: client ref, status, tasks, timeline
│   ├── Note.js            # Note schema: content, author, timestamp, client ref
│   ├── Document.js        # Document schema: file path, type, client ref
│   └── CalendarEvent.js   # Event schema: title, date, attendees, client ref
├── routes/
│   ├── clientRoutes.js    # GET/POST /clients, GET/PUT/DELETE /clients/:id
│   ├── caseRoutes.js      # Case management routes
│   ├── noteRoutes.js      # Notes CRUD routes
│   ├── documentRoutes.js  # Document upload and management routes
│   └── calendarRoutes.js  # GET/POST /events, Google Calendar operations
├── services/
│   ├── clientService.js   # Client business logic
│   ├── caseService.js     # Case business logic
│   └── calendarService.js # Calendar integration logic
└── utils/
    ├── googleCalendar.js  # Google Calendar API helpers
    ├── fileStorage.js     # Document storage utilities
    └── formatters.js      # Data formatters

------------------------------------------------------------------------------
------------------------------------------------------------------------------
Transcription Service

transcription-service/
├── package.json           # Dependencies: express, mongoose, axios, multer
├── .env                   # ENV: MONGO_URI, JWT_SECRET, OPENAI_API_KEY
├── server.js              # Service entry point
├── controllers/
│   ├── transcriptionController.js # Handle transcription requests
│   ├── audioController.js # Audio file management
│   └── summaryController.js # Generate summaries from transcripts
├── models/
│   ├── Transcription.js   # Schema: audio ref, text, client ref, creator
│   ├── AudioFile.js       # Schema: file path, duration, metadata
│   └── Summary.js         # Schema: transcription ref, summary text, action points
├── routes/
│   ├── transcriptionRoutes.js # POST /transcribe, GET /transcriptions
│   ├── audioRoutes.js     # Audio file upload and management
│   └── summaryRoutes.js   # GET /transcriptions/:id/summary
├── services/
│   ├── whisperService.js  # OpenAI Whisper API integration
│   ├── audioService.js    # Audio file processing
│   └── summaryService.js  # Summary generation logic
└── utils/
    ├── audioProcessor.js  # Audio file format handling
    ├── openaiClient.js    # OpenAI API client
    └── formatters.js      # Text formatting utilities

------------------------------------------------------------------------------
------------------------------------------------------------------------------
Chatbot Service

chatbot-service/
├── package.json           # Dependencies: express, mongoose, text-search libraries
├── .env                   # ENV: MONGO_URI, JWT_SECRET
├── server.js              # Service entry point
├── controllers/
│   ├── chatbotController.js # Handle chat queries
│   ├── trainingController.js # Manage training materials
│   └── searchController.js # Search functionality
├── models/
│   ├── ChatQuery.js       # Schema: query text, response, user ref
│   ├── TrainingMaterial.js # Schema: title, content, file path, type
│   └── SearchIndex.js     # Schema: indexed content, references
├── routes/
│   ├── chatbotRoutes.js   # POST /chat, GET /chat/history
│   ├── trainingRoutes.js  # Training materials CRUD
│   └── searchRoutes.js    # GET /search
├── services/
│   ├── chatService.js     # Chat processing logic
│   ├── indexingService.js # Content indexing for search
│   └── searchService.js   # Search implementation
└── utils/
    ├── textProcessor.js   # Text parsing and processing
    ├── relevanceRanking.js # Rank search results by relevance
    └── responseFormatter.js # Format chatbot responses

------------------------------------------------------------------------------
------------------------------------------------------------------------------
Billing Service

billing-service/
├── package.json           # Dependencies: express, mongoose, stripe
├── .env                   # ENV: MONGO_URI, JWT_SECRET, STRIPE_API_KEYS
├── server.js              # Service entry point
├── controllers/
│   ├── subscriptionController.js # Subscription management
│   ├── paymentController.js # Payment processing
│   └── webhookController.js # Stripe webhook handler
├── models/
│   ├── Subscription.js    # Schema: plan, status, agency ref, dates
│   ├── Payment.js         # Schema: amount, status, subscription ref
│   └── PricingPlan.js     # Schema: name, price, features
├── routes/
│   ├── subscriptionRoutes.js # GET/POST subscriptions
│   ├── paymentRoutes.js   # Payment processing routes
│   └── webhookRoutes.js   # POST /webhooks/stripe
├── services/
│   ├── subscriptionService.js # Subscription business logic
│   ├── paymentService.js  # Payment processing logic
│   └── stripeService.js   # Stripe API integration
└── utils/
    ├── stripeUtils.js     # Stripe API helpers
    ├── invoiceGenerator.js # Generate PDF invoices
    └── webhookVerifier.js # Verify Stripe webhook signatures

------------------------------------------------------------------------------
------------------------------------------------------------------------------
API Gateway

gateway/
├── package.json           # Gateway-specific dependencies
├── .env                   # Environment variables
├── server.js              # Gateway entry point
├── routes/                # Route definitions
│   ├── authRoutes.js      # Routes for auth service
│   ├── clientRoutes.js    # Routes for client service
│   ├── transcriptionRoutes.js # Routes for transcription service
│   ├── chatbotRoutes.js   # Routes for chatbot service
│   └── billingRoutes.js   # Routes for billing service
└── middlewares/           # Gateway middlewares
    ├── authMiddleware.js  # Authentication verification
    └── corsMiddleware.js  # CORS handling

------------------------------------------------------------------------------
------------------------------------------------------------------------------

Frontend Structure

frontend/
├── package.json           # Frontend dependencies
├── .env                   # Environment variables
├── public/                # Static files
│   ├── index.html         # HTML entry point
│   ├── favicon.ico        # Favicon
│   └── images/            # Static images
├── src/                   # Source code
    ├── index.js           # App entry point
    ├── App.js             # Main App component
    ├── theme/             # Material UI theme configuration
    │   ├── index.js               # Main theme export
    │   ├── palette.js             # Color palette configuration
    │   ├── typography.js          # Typography configuration
    │   ├── components/            # Component-specific theme overrides 
    │   │   ├── buttons.js         # Button styling
    │   │   ├── inputs.js          # Input field styling
    │   │   └── ...                # Other component styles
    │   └── overrides.js           # Global Material UI overrides
    ├── api/               # API client utilities
    │   ├── auth.js        # Auth API calls
    │   ├── clients.js     # Client API calls
    │   ├── transcription.js # Transcription API calls
    │   ├── chatbot.js     # Chatbot API calls
    │   └── billing.js     # Billing API calls
    ├── assets/            # Front-end assets
    │   ├── images/        # Images
    │   └── styles/        # CSS files
    ├── components/        # All reusable components (as described in below response)
    ├── context/           # React context providers
    │   ├── AuthContext.js # Authentication context
    │   └── UIContext.js   # UI state context
    ├── hooks/             # Custom React hooks
    │   ├── useAuth.js     # Authentication hook
    │   ├── useApi.js      # API request hook
    │   └── useForm.js     # Form handling hook
    ├── pages/             # All page components (as described in below response)
    ├── utils/             # Utility functions
    │   ├── auth.js        # Auth utilities
    │   ├── validation.js  # Form validation
    │   ├── formatting.js  # Data formatting utils
    │   └── storage.js     # Local storage utils
    └── routes/            # Routing configuration
        └── index.js       # Route definitions

----------------------------------------------------------------------------
----------------------------------------------------------------------------
Material UI Theme Configuration

frontend/src/theme/
├── index.js               # Main theme export
├── palette.js             # Color palette configuration
├── typography.js          # Typography configuration
├── components/            # Component-specific theme overrides
│   ├── buttons.js         # Button styling
│   ├── inputs.js          # Input field styling
│   └── ...                # Other component styles
└── overrides.js           # Global Material UI overrides

----------------------------------------------------------------------------
----------------------------------------------------------------------------
Frontend Components

frontend/src/components/
├── common/
│   ├── Navbar.js          # Top navigation bar
│   ├── Sidebar.js         # Side navigation
│   ├── PageHeader.js      # Standard page header with breadcrumbs
│   ├── DataTable.js       # Reusable data table with sorting/filtering
│   ├── FormFields/        # Reusable form components
│   │   ├── TextField.js   # Text input with validation
│   │   ├── SelectField.js # Dropdown select
│   │   └── ...            # Other form fields
│   ├── Modals/            # Reusable modal dialogs
│   │   ├── ConfirmModal.js # Confirmation dialog
│   │   └── FormModal.js   # Form in a modal
│   └── Feedback/          # User feedback components
│       ├── Alert.js       # Alert messages
│       ├── Spinner.js     # Loading indicator
│       └── ...            # Other feedback elements
├── dashboard/
│   ├── StatCard.js        # Statistic display card
│   ├── RecentActivity.js  # Activity feed
│   └── QuickActions.js    # Common action buttons
├── clients/
│   ├── ClientForm.js      # Client creation/edit form
│   ├── ClientCard.js      # Client summary card
│   ├── CaseBoard.js       # Trello-like case board
│   ├── NotesList.js       # Client notes listing
│   └── DocumentsList.js   # Client documents listing
├── transcription/
│   ├── AudioRecorder.js   # Audio recording interface
│   ├── FileUploader.js    # Audio file upload
│   ├── TranscriptViewer.js # Transcript display
│   └── SummaryCard.js     # Transcript summary display
└── chatbot/
    ├── ChatInterface.js   # Chat UI with messages
    ├── MessageBubble.js   # Individual message display
    └── QueryInput.js      # Chat input with send button

----------------------------------------------------------------------------
----------------------------------------------------------------------------
Frontend Pages

frontend/src/pages/
├── auth/
│   ├── LoginPage.js           # Login form and authentication
│   ├── RegisterPage.js        # New user registration
│   ├── ForgotPasswordPage.js  # Password recovery request
│   └── ResetPasswordPage.js   # Password reset form
├── dashboard/
│   └── DashboardPage.js       # Main dashboard with widgets and stats
├── clients/
│   ├── ClientsListPage.js     # Clients listing with filters
│   ├── ClientDetailPage.js    # Client profile and case info
│   ├── CaseBoardPage.js       # Trello-like case board view
│   └── DocumentsPage.js       # Document management interface
├── transcription/
│   ├── NewTranscriptionPage.js # Create new transcription
│   ├── TranscriptionsListPage.js # List of past transcriptions
│   └── TranscriptionDetailPage.js # View single transcription
├── chatbot/
│   └── ChatbotPage.js         # Chatbot interface
├── settings/
│   ├── ProfilePage.js         # User profile settings
│   ├── UserManagementPage.js  # Admin user management
│   ├── AgencySettingsPage.js  # Agency configuration
│   ├── TrainingMaterialsPage.js # Upload and manage training docs
│   └── BillingPage.js         # Manage subscription and billing
└── marketing/
    ├── HomePage.js            # Public homepage
    ├── AboutPage.js           # About the platform
    └── PricingPage.js         # Pricing information
----------------------------------------------------------------------------
----------------------------------------------------------------------------

Deployment Configuration

support-sync/
├── aws/                   # AWS deployment configurations
│   ├── cloudformation/    # CloudFormation templates
│   │   ├── network.yml    # VPC, subnets, security groups
│   │   ├── database.yml   # MongoDB setup
│   │   ├── services.yml   # ECS services
│   │   └── frontend.yml   # S3 & CloudFront setup
│   └── scripts/           # Deployment scripts
│       ├── deploy.sh      # Main deployment script
│       └── build.sh       # Build script

----------------------------------------------------------------------------
----------------------------------------------------------------------------

Additional Configuration Files

support-sync/
├── .eslintrc.js           # ESLint configuration
├── .prettierrc            # Prettier configuration
├── babel.config.js        # Babel configuration
├── jest.config.js         # Jest testing configuration
└── nodemon.json           # Nodemon configuration for development