name: Deploy Frontend and Backend
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
    
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm install --legacy-peer-deps
    
    - name: Build Frontend
      run: |
        cd frontend
        CI=false npm run build
    
    - name: Deploy to S3
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --follow-symlinks --delete
      env:
        AWS_S3_BUCKET: ${{ secrets.S3_BUCKET_NAME }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'us-east-1'
        SOURCE_DIR: 'frontend/build'

  deploy-backend:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: 
          - gateway
          - auth-service
          - transcription-service
          - client-service
          - chatbot-service
    steps:
    - uses: actions/checkout@v3
    
    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        known_hosts: unnecessary
    
    - name: Deploy ${{ matrix.service }}
      env:
        SERVICE_ENV: >-
          ${{ 
            matrix.service == 'gateway' && secrets.GATEWAY_ENV ||
            matrix.service == 'auth-service' && secrets.AUTH_SERVICE_ENV ||
            matrix.service == 'transcription-service' && secrets.TRANSCRIPTION_SERVICE_ENV ||
            matrix.service == 'client-service' && secrets.CLIENT_SERVICE_ENV ||
            matrix.service == 'chatbot-service' && secrets.CHATBOT_SERVICE_ENV
          }}
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          # Specific path handling based on service
          if [ "${{ matrix.service }}" == "gateway" ]; then
            cd ~/support-sync/backend/gateway
          else
            cd ~/support-sync/backend/services/${{ matrix.service }}
          fi
          
          # Create .env file with GitHub secret
          echo "$SERVICE_ENV" > .env
          
          # Pull latest code
          git pull origin main
          
          # Install dependencies
          npm install --legacy-peer-deps
          
          # Restart service using PM2
          pm2 restart ${{ matrix.service }}
        EOF
